import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Download, FileText } from "lucide-react";
import { toast } from "sonner";
import jsPDF from 'jspdf';

interface BinanceDebugReportGeneratorProps {
  className?: string;
}

export const BinanceDebugReportGenerator = ({ className }: BinanceDebugReportGeneratorProps) => {
  const generateDebugReport = async () => {
    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.width;
      const margin = 20;
      let yPosition = 20;

      // Header
      doc.setFontSize(18);
      doc.setFont('helvetica', 'bold');
      doc.text('Binance API Integration Debug Report', margin, yPosition);
      yPosition += 15;

      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Generated: ${new Date().toLocaleString()}`, margin, yPosition);
      yPosition += 20;

      // Issue Summary
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('ISSUE SUMMARY', margin, yPosition);
      yPosition += 10;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      const issueSummary = [
        'Cryptocurrency transactions successfully initiated via Binance API.',
        'Transaction IDs (TXID) and blockchain hashes are generated by the system.',
        'CRITICAL: TXID and Hash are MISSING from blockchain.com/explorer/search verification.',
        'This indicates an end-to-end configuration/implementation issue preventing blockchain confirmation.',
        'Binance support staff cannot post the credit until blockchain verification is resolved.'
      ];

      issueSummary.forEach(item => {
        const splitText = doc.splitTextToSize(`• ${item}`, pageWidth - 2 * margin);
        doc.text(splitText, margin, yPosition);
        yPosition += splitText.length * 5 + 3;
      });

      yPosition += 10;

      // Account Information
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('ACCOUNT INFORMATION', margin, yPosition);
      yPosition += 10;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      const accountInfo = [
        'Account Status: Fully verified',
        'Receiving Limits: UNLIMITED',
        'Withdrawal Limits: UNLIMITED',
        'Region: Global',
        'Verification Level: Complete KYC/AML verification',
        'API Access: Enabled with full permissions'
      ];

      accountInfo.forEach(item => {
        doc.text(`• ${item}`, margin, yPosition);
        yPosition += 7;
      });

      yPosition += 10;

      // Technical Details
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('TECHNICAL DETAILS', margin, yPosition);
      yPosition += 10;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      const technicalDetails = [
        'API Endpoint: Binance Cryptocurrency Send API',
        'Authentication: API Key-based authentication',
        'Request Method: POST',
        'Content-Type: application/json',
        'Transaction Status: Shows as "COMPLETE" in system',
        'CRITICAL ISSUE: Generated TXID not found on https://www.blockchain.com/explorer/search',
        'Blockchain Verification: FAILED - Transaction hash not propagating to blockchain explorer'
      ];

      technicalDetails.forEach(item => {
        const splitText = doc.splitTextToSize(`• ${item}`, pageWidth - 2 * margin);
        doc.text(splitText, margin, yPosition);
        yPosition += splitText.length * 5 + 3;
      });

      yPosition += 10;

      // Recent Transaction Attempts
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('RECENT TRANSACTION ATTEMPTS', margin, yPosition);
      yPosition += 10;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      const transactions = [
        'Multiple BTC transactions initiated successfully',
        'System generates Transaction ID and Hash',
        'Status shows as "COMPLETE" in application',
        'PROBLEM: Hash NOT visible on blockchain.com/explorer/search',
        'PROBLEM: Transaction cannot be independently verified on blockchain',
        'RESULT: Binance support unable to credit funds without blockchain confirmation'
      ];

      transactions.forEach(item => {
        const splitText = doc.splitTextToSize(`• ${item}`, pageWidth - 2 * margin);
        doc.text(splitText, margin, yPosition);
        yPosition += splitText.length * 5 + 3;
      });

      // Add new page if needed
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }

      yPosition += 10;

      // Critical Blockchain Issue
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(255, 0, 0);
      doc.text('CRITICAL BLOCKCHAIN VERIFICATION ISSUE', margin, yPosition);
      doc.setTextColor(0, 0, 0);
      yPosition += 10;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      const blockchainIssue = [
        'ROOT CAUSE ANALYSIS:',
        '  The transaction TXID and hash generated by our system are not appearing',
        '  on the public blockchain explorer (blockchain.com/explorer/search).',
        '',
        'IMPACT:',
        '  - Transactions cannot be independently verified on the blockchain',
        '  - Binance support staff require blockchain confirmation to post credits',
        '  - End-to-end configuration issue preventing proper blockchain propagation',
        '',
        'URGENCY:',
        '  This is blocking all cryptocurrency credit postings and requires',
        '  immediate resolution to restore normal transaction processing.'
      ];

      blockchainIssue.forEach(item => {
        if (item === '') {
          yPosition += 3;
        } else {
          const splitText = doc.splitTextToSize(item, pageWidth - 2 * margin);
          doc.text(splitText, margin, yPosition);
          yPosition += splitText.length * 5 + 2;
        }
      });

      // Add new page if needed
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }

      yPosition += 10;

      // Questions for Binance Support
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('QUESTIONS FOR BINANCE SUPPORT', margin, yPosition);
      yPosition += 10;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      const questions = [
        '1. API Configuration:',
        '   - Are our API credentials configured for production blockchain network?',
        '   - Is there a separate testnet vs mainnet configuration required?',
        '   - What additional settings are needed for blockchain propagation?',
        '',
        '2. Transaction Hash Generation:',
        '   - Should the hash be generated by our system or returned by Binance API?',
        '   - What format should the blockchain transaction hash follow?',
        '   - How long does it typically take for transactions to appear on blockchain explorer?',
        '',
        '3. Blockchain Network Settings:',
        '   - Which Bitcoin network should we be using (mainnet/testnet)?',
        '   - Are there specific blockchain explorer endpoints we should verify against?',
        '   - What additional parameters are needed for proper blockchain posting?',
        '',
        '4. Credit Posting Requirements:',
        '   - What specific blockchain confirmation is required before credits can be posted?',
        '   - How can we ensure our transactions are properly broadcast to the blockchain?',
        '   - Is there a webhook or callback system for blockchain confirmation?',
        '',
        '5. Immediate Resolution Steps:',
        '   - What is preventing our transaction hashes from appearing on blockchain.com?',
        '   - What configuration changes are needed to enable proper blockchain propagation?',
        '   - How can we resolve this end-to-end implementation issue?'
      ];

      questions.forEach(item => {
        if (item === '') {
          yPosition += 3;
        } else {
          const splitText = doc.splitTextToSize(item, pageWidth - 2 * margin);
          doc.text(splitText, margin, yPosition);
          yPosition += splitText.length * 5 + 2;
        }
        
        // Add new page if needed
        if (yPosition > 260) {
          doc.addPage();
          yPosition = 20;
        }
      });

      yPosition += 10;

      // Expected Resolution
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('EXPECTED RESOLUTION', margin, yPosition);
      yPosition += 10;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      const resolution = [
        'Fix end-to-end blockchain propagation configuration.',
        'Enable proper TXID and hash broadcasting to public blockchain network.',
        'Provide documentation on correct API implementation for blockchain verification.',
        'Resolve the missing transaction issue on blockchain.com/explorer/search.',
        'Enable Binance support staff to verify and post credits based on blockchain confirmation.',
        'Establish monitoring system to ensure future transactions propagate correctly.'
      ];

      resolution.forEach(item => {
        const splitText = doc.splitTextToSize(`• ${item}`, pageWidth - 2 * margin);
        doc.text(splitText, margin, yPosition);
        yPosition += splitText.length * 5 + 3;
      });

      yPosition += 15;

      // Contact Information
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('CONTACT INFORMATION', margin, yPosition);
      yPosition += 10;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text('This is a CRITICAL issue preventing all cryptocurrency credit postings.', margin, yPosition);
      yPosition += 7;
      doc.text('We are available 24/7 to provide additional technical details and implement fixes.', margin, yPosition);
      yPosition += 7;
      doc.text('Please prioritize this case as it is blocking core transaction functionality.', margin, yPosition);

      yPosition += 15;

      // Footer
      doc.setFontSize(8);
      doc.setFont('helvetica', 'italic');
      doc.text('This report was generated automatically by our system.', margin, yPosition);
      doc.text('All transaction details and technical logs are available upon request.', margin, yPosition + 5);

      // Save the PDF
      const fileName = `binance-debug-report-${new Date().toISOString().slice(0, 10)}.pdf`;
      doc.save(fileName);
      
      toast.success('Binance debug report generated successfully');
    } catch (error) {
      console.error('Error generating debug report:', error);
      toast.error('Failed to generate debug report');
    }
  };

  return (
    <Card className={`p-4 ${className}`}>
      <div className="flex items-center gap-3 mb-4">
        <FileText className="h-5 w-5 text-primary" />
        <h3 className="text-lg font-semibold">Binance Support Debug Report</h3>
      </div>
      
      <p className="text-sm text-muted-foreground mb-4">
        Generate a comprehensive debugging report for Binance support regarding the blockchain propagation issue.
        This report details the critical problem where transaction hashes are not appearing on blockchain.com explorer,
        preventing support staff from posting credits.
      </p>
      
      <Button 
        onClick={generateDebugReport}
        className="w-full"
        variant="outline"
      >
        <Download className="mr-2 h-4 w-4" />
        Generate Debug Report PDF
      </Button>
      
      <div className="mt-3 text-xs text-muted-foreground">
        <p>Report includes:</p>
        <ul className="list-disc list-inside mt-1 space-y-1">
          <li>Critical blockchain verification issue details</li>
          <li>Account information with UNLIMITED receiving limits</li>
          <li>Technical implementation analysis</li>
          <li>Blockchain.com explorer verification problem</li>
          <li>Questions for resolving end-to-end configuration</li>
          <li>Impact on credit posting workflow</li>
        </ul>
      </div>
    </Card>
  );
};